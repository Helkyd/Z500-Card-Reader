package ao.metagest.z500cardreader.db.dao;



import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.Map;

//import test.metagestdemo.activity.db.entiry.BlackList;
//import test.metagestdemo.activity.db.entiry.EMVBatchUploadData;
//import test.metagestdemo.activity.db.entiry.EMVTransferLog;

import ao.metagest.z500cardreader.db.entiry.BlackList;
import ao.metagest.z500cardreader.db.entiry.EMVBatchUploadData;
import ao.metagest.z500cardreader.db.entiry.EMVTransferLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig blackListDaoConfig;
    private final DaoConfig eMVBatchUploadDataDaoConfig;
    private final DaoConfig eMVTransferLogDaoConfig;

    private final BlackListDao blackListDao;
    private final EMVBatchUploadDataDao eMVBatchUploadDataDao;
    private final EMVTransferLogDao eMVTransferLogDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        blackListDaoConfig = daoConfigMap.get(BlackListDao.class).clone();
        blackListDaoConfig.initIdentityScope(type);

        eMVBatchUploadDataDaoConfig = daoConfigMap.get(EMVBatchUploadDataDao.class).clone();
        eMVBatchUploadDataDaoConfig.initIdentityScope(type);

        eMVTransferLogDaoConfig = daoConfigMap.get(EMVTransferLogDao.class).clone();
        eMVTransferLogDaoConfig.initIdentityScope(type);

        blackListDao = new BlackListDao(blackListDaoConfig, this);
        eMVBatchUploadDataDao = new EMVBatchUploadDataDao(eMVBatchUploadDataDaoConfig, this);
        eMVTransferLogDao = new EMVTransferLogDao(eMVTransferLogDaoConfig, this);

        registerDao(BlackList.class, blackListDao);
        registerDao(EMVBatchUploadData.class, eMVBatchUploadDataDao);
        registerDao(EMVTransferLog.class, eMVTransferLogDao);
    }
    
    public void clear() {
        blackListDaoConfig.clearIdentityScope();
        eMVBatchUploadDataDaoConfig.clearIdentityScope();
        eMVTransferLogDaoConfig.clearIdentityScope();
    }

    public BlackListDao getBlackListDao() {
        return blackListDao;
    }

    public EMVBatchUploadDataDao getEMVBatchUploadDataDao() {
        return eMVBatchUploadDataDao;
    }

    public EMVTransferLogDao getEMVTransferLogDao() {
        return eMVTransferLogDao;
    }

}
